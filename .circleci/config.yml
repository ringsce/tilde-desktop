version: 2.1

executors:
  pascal-executor-amd64:
    docker:
      - image: ubuntu:latest
    working_directory: ~/repo

  pascal-executor-arm64:
    docker:
      - image: arm64v8/ubuntu-2204:current
    working_directory: ~/repo

  macos-arm64-executor:
    macos:
      xcode: 14.2.0
    working_directory: ~/repo

  windows-amd64-executor:
    machine:
      image: windows-server-2022
    working_directory: C:\repo

  windows-arm64-executor:
    machine:
      image: windows-server-2022
    working_directory: C:\repo

jobs:
  build-amd64:
    executor: pascal-executor-amd64
    steps:
      - checkout
      - run:
          name: Install Required Packages
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y fpc tzdata
            echo "Etc/UTC" > /etc/timezone
            ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
            dpkg-reconfigure -f noninteractive tzdata
      - run:
          name: Compile Dyld (AMD64)
          command: |
            mkdir -p build
            fpc -O2 -Xs -o"build/Dyld" bin/dyld/newDyld.pas
      - run:
          name: Package Release (AMD64)
          command: |
            mkdir -p output
            tar -czvf output/DyldRelease-amd64.tar.gz -C build .
      - persist_to_workspace:
          root: output
          paths:
            - DyldRelease-amd64.tar.gz

  build-arm64:
    executor: pascal-executor-arm64
    steps:
      - checkout
      - run:
          name: Install Required Packages
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y fpc tzdata
            echo "Etc/UTC" > /etc/timezone
            ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
            dpkg-reconfigure -f noninteractive tzdata
      - run:
          name: Compile Dyld (ARM64)
          command: |
            mkdir -p build
            fpc -O2 -Xs -o"build/Dyld" bin/dyld/newDyld.pas
      - run:
          name: Package Release (ARM64)
          command: |
            mkdir -p output
            tar -czvf output/DyldRelease-arm64.tar.gz -C build .
      - persist_to_workspace:
          root: output
          paths:
            - DyldRelease-arm64.tar.gz

  build-macos-arm64:
    executor: macos-arm64-executor
    steps:
      - checkout
      - run:
          name: Install Free Pascal Compiler
          command: |
            brew update
            brew install fpc
      - run:
          name: Compile Dyld (macOS ARM64)
          command: |
            mkdir -p build
            fpc -O2 -Xs -o"build/Dyld" bin/dyld/newDyld.pas
      - run:
          name: Package Release (macOS ARM64)
          command: |
            mkdir -p output
            tar -czvf output/DyldRelease-macos-arm64.tar.gz -C build .
      - persist_to_workspace:
          root: output
          paths:
            - DyldRelease-macos-arm64.tar.gz

  build-windows-amd64:
    executor: windows-amd64-executor
    steps:
      - checkout
      - run:
          name: Install Free Pascal Compiler
          command: |
            choco install fpc -y || echo "FPC already installed"
      - run:
          name: Compile Dyld (Windows AMD64)
          command: |
            mkdir build
            fpc -O2 -Xs -o"build\\Dyld.exe" bin\\dyld\\newDyld.pas
      - run:
          name: Package Release (Windows AMD64)
          command: |
            mkdir output
            tar -czvf output\\DyldRelease-windows-amd64.tar.gz -C build .
      - persist_to_workspace:
          root: output
          paths:
            - DyldRelease-windows-amd64.tar.gz

  build-windows-arm64:
    executor: windows-arm64-executor
    steps:
      - checkout
      - run:
          name: Install Free Pascal Compiler
          command: |
            choco install fpc
      - run:
          name: Compile Dyld (Windows ARM64)
          command: |
            mkdir build
            fpc -O2 -Xs -o"build\\Dyld.exe" bin\\dyld\\newDyld.pas
      - run:
          name: Package Release (Windows ARM64)
          command: |
            mkdir output
            tar -czvf output\\DyldRelease-windows-arm64.tar.gz -C build .
      - persist_to_workspace:
          root: output
          paths:
            - DyldRelease-windows-arm64.tar.gz

  upload-to-github:
    docker:
      - image: circleci/python:3.8
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Upload to GitHub Release
          command: |
            apt-get update && apt-get install -y curl jq
            TAG="v1.0.0" # Update this dynamically if needed
            REPO="owner/repo" # Replace with your GitHub repository
            TOKEN=$GITHUB_TOKEN
            API_URL="https://api.github.com/repos/$REPO/releases"

            # Create a release
            RELEASE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token $TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\": \"$TAG\", \"name\": \"$TAG\", \"body\": \"Release $TAG\", \"draft\": false, \"prerelease\": false}" \
              $API_URL)
            
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')

            # Upload assets
            for FILE in /workspace/*.tar.gz; do
              FILENAME=$(basename $FILE)
              curl -s -X POST \
                -H "Authorization: token $TOKEN" \
                -H "Content-Type: application/gzip" \
                --data-binary @"$FILE" \
                "https://uploads.github.com/repos/$REPO/releases/$RELEASE_ID/assets?name=$FILENAME"
            done

workflows:
  version: 2
  build_and_release:
    jobs:
      - build-amd64
      - build-arm64
      - build-macos-arm64
      - build-windows-amd64
      - build-windows-arm64
      - upload-to-github:
          requires:
            - build-amd64
            - build-arm64
            - build-macos-arm64
            - build-windows-amd64
            - build-windows-arm64

